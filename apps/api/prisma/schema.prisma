// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model CPT {
  id          String      @id @default(uuid())
  email       String      @unique
  passwordHash String
  firstName   String?
  lastName    String?
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  bio         String?
  onboardingCompleted Boolean @default(false)
  onboardingCompletedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clients     Client[]
  programs    Program[]
  assessments Assessment[]
  progresses  Progress[]
  trainerProfile TrainerProfile?
  certifications Certification[]
  sessions    Session[] // <-- Added for scheduling
  notifications Notification[] // <-- Added for notifications
  availabilities Availability[] // <-- Added for availability management
  availabilityExceptions AvailabilityException[] // <-- Added for availability exceptions
}
model Client {
  id        String      @id @default(uuid())
  cptId     String
  codeName  String      @unique // HIPAA abstraction, e.g., "Client-001"
  firstName String
  lastName  String
  dateOfBirth DateTime
  gender    Gender
  email     String?     @unique
  phone     String?
  notes     String?
  status    ClientStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  passwordHash String? // <-- Added for client authentication
  cpt       CPT         @relation(fields: [cptId], references: [id])
  assessments Assessment[]
  programs     Program[]
  progresses   Progress[]
  sessions     Session[] // <-- Added for scheduling
  notifications Notification[] // <-- Added for notifications
}

enum ClientStatus {
  prospect
  active
  inactive
}

model Assessment {
  id            String      @id @default(uuid())
  cptId         String
  clientId      String
  type          AssessmentType
  assessmentDate DateTime
  assessor      String      // Name of person conducting assessment
  notes         String?
  data          Json        // Structured assessment data (PARQ, measurements, etc.)
  status        AssessmentStatus @default(COMPLETED)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cpt           CPT         @relation(fields: [cptId], references: [id])
  client        Client      @relation(fields: [clientId], references: [id])
  notifications Notification[]
}

enum AssessmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssessmentType {
  PARQ
  FITNESS_ASSESSMENT
  BODY_COMPOSITION
  FLEXIBILITY
  STRENGTH
  CARDIOVASCULAR
  OTHER
}

model Program {
  id          String      @id @default(uuid())
  cptId       String
  clientId    String
  programName String
  startDate   DateTime
  endDate     DateTime?
  optPhase    OPTPhase    @default(STABILIZATION_ENDURANCE)
  primaryGoal String      // Specific goal within the OPT phase
  secondaryGoals String?  // Additional goals
  notes       String?
  data        Json        // Structured OPT program data with phases, workouts, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cpt         CPT         @relation(fields: [cptId], references: [id])
  client      Client      @relation(fields: [clientId], references: [id])
  progresses  Progress[]
  notifications Notification[]
}

model Progress {
  id        String    @id @default(uuid())
  cptId     String
  clientId  String
  programId String?   // Optional reference to specific program
  date      DateTime
  weight    Float?
  bodyFat   Float?
  notes     String?
  data      Json      // Additional progress metrics
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cpt       CPT       @relation(fields: [cptId], references: [id])
  client    Client    @relation(fields: [clientId], references: [id])
  program   Program?  @relation(fields: [programId], references: [id])
  notifications Notification[]
}

enum Gender {
  male
  female
  other
  undisclosed
}

enum OPTPhase {
  STABILIZATION_ENDURANCE
  STRENGTH_ENDURANCE
  MUSCULAR_DEVELOPMENT
  MAXIMAL_STRENGTH
  POWER
}

// --- Scheduling ---
model Session {
  id          String   @id @default(uuid())
  cptId       String
  clientId    String
  startTime   DateTime
  endTime     DateTime?
  status      SessionStatus @default(SCHEDULED)
  type        SessionType   @default(IN_PERSON)
  location    String?
  notes       String?
  
  // Recurring session support
  isRecurring Boolean  @default(false)
  recurringPattern Json? // { frequency: 'weekly', interval: 1, daysOfWeek: [1,3,5], endDate: '2025-12-31' }
  parentSessionId String? // For recurring session instances
  recurringSessionId String? // ID of the recurring session template
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cpt         CPT      @relation(fields: [cptId], references: [id])
  client      Client   @relation(fields: [clientId], references: [id])
  notifications Notification[]
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  MISSED
}

enum SessionType {
  IN_PERSON
  VIRTUAL
}

model TrainerProfile {
  id                    String   @id @default(uuid())
  userId                String   @unique
  businessName          String?
  businessType          String?
  website               String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  country               String?
  timezone              String?
  businessHours         Json?
  defaultSessionDuration Int     @default(60)
  reminderPreferences   Json?
  privacySettings       Json?
  aiFeatures            Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  CPT      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Availability Management ---
model Availability {
  id          String   @id @default(uuid())
  trainerId   String
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  isAvailable Boolean  @default(true)
  sessionTypes Json?   // { inPerson: true, virtual: true }
  maxSessionsPerDay Int @default(8)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     CPT      @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

// --- Availability Exceptions ---
model AvailabilityException {
  id          String   @id @default(uuid())
  trainerId   String
  date        DateTime // Specific date
  startTime   String?  // HH:MM format, null for all day
  endTime     String?  // HH:MM format, null for all day
  isAvailable Boolean  @default(false)
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trainer     CPT      @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

model Certification {
  id                    String   @id @default(uuid())
  userId                String
  name                  String
  issuingOrganization   String
  issueDate             DateTime?
  expiryDate            DateTime?
  certificationNumber   String?
  verified              Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  CPT      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- Notification System ---
model Notification {
  id          String   @id @default(uuid())
  userId      String   // CPT or Client ID
  userType    UserType // CPT or CLIENT
  type        NotificationType
  title       String
  message     String
  data        Json?    // Additional context data
  status      NotificationStatus @default(PENDING)
  priority    NotificationPriority @default(NORMAL)
  channel     NotificationChannel
  scheduledFor DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  errorMessage String?
  retryCount  Int      @default(0)
  maxRetries  Int      @default(3)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Optional references to related entities
  sessionId   String?
  session     Session? @relation(fields: [sessionId], references: [id])
  assessmentId String?
  assessment  Assessment? @relation(fields: [assessmentId], references: [id])
  programId   String?
  program     Program? @relation(fields: [programId], references: [id])
  progressId  String?
  progress    Progress? @relation(fields: [progressId], references: [id])
  
  // User relationships
  cpt         CPT?     @relation(fields: [userId], references: [id])
  client      Client?  @relation(fields: [userId], references: [id])
}

model NotificationTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  type        NotificationType
  title       String
  message     String
  variables   Json     // Template variables like {{clientName}}, {{sessionTime}}, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserType {
  CPT
  CLIENT
}

enum NotificationType {
  SESSION_REMINDER
  SESSION_CANCELLED
  SESSION_RESCHEDULED
  SESSION_COMPLETED
  ASSESSMENT_DUE
  ASSESSMENT_COMPLETED
  PROGRESS_MILESTONE
  PROGRESS_UPDATE
  PROGRAM_ASSIGNED
  PROGRAM_COMPLETED
  WELCOME_MESSAGE
  PASSWORD_RESET
  ACCOUNT_UPDATE
  SYSTEM_ALERT
  CUSTOM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}
